// Code generated by capnpc-go. DO NOT EDIT.

package igor

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xcbfc0186319f5a6c

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xcbfc0186319f5a6c, s.Struct)
	return str
}

func (s Event) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s Event) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Event) Type() EventType {
	return EventType(s.Struct.Uint16(8))
}

func (s Event) SetType(v EventType) {
	s.Struct.SetUint16(8, uint16(v))
}

func (s Event) Location() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Event) HasLocation() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) SetLocation(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLocation sets the location field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Event) NewLocation(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Event) From() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Event) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event) FromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Event) SetFrom(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Event) Payload() (Event_KeyValue_List, error) {
	p, err := s.Struct.Ptr(2)
	return Event_KeyValue_List{List: p.List()}, err
}

func (s Event) HasPayload() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Event) SetPayload(v Event_KeyValue_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPayload sets the payload field to a newly
// allocated Event_KeyValue_List, preferring placement in s's segment.
func (s Event) NewPayload(n int32) (Event_KeyValue_List, error) {
	l, err := NewEvent_KeyValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_KeyValue_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0xcbfc0186319f5a6c, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

type Event_KeyValue struct{ capnp.Struct }
type Event_KeyValue_value Event_KeyValue
type Event_KeyValue_value_Which uint16

const (
	Event_KeyValue_value_Which_bool   Event_KeyValue_value_Which = 0
	Event_KeyValue_value_Which_int    Event_KeyValue_value_Which = 1
	Event_KeyValue_value_Which_uint   Event_KeyValue_value_Which = 2
	Event_KeyValue_value_Which_float  Event_KeyValue_value_Which = 3
	Event_KeyValue_value_Which_string Event_KeyValue_value_Which = 4
)

func (w Event_KeyValue_value_Which) String() string {
	const s = "boolintuintfloatstring"
	switch w {
	case Event_KeyValue_value_Which_bool:
		return s[0:4]
	case Event_KeyValue_value_Which_int:
		return s[4:7]
	case Event_KeyValue_value_Which_uint:
		return s[7:11]
	case Event_KeyValue_value_Which_float:
		return s[11:16]
	case Event_KeyValue_value_Which_string:
		return s[16:22]

	}
	return "Event_KeyValue_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_KeyValue_TypeID is the unique identifier for the type Event_KeyValue.
const Event_KeyValue_TypeID = 0xcc563d0567a7e8ab

func NewEvent_KeyValue(s *capnp.Segment) (Event_KeyValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event_KeyValue{st}, err
}

func NewRootEvent_KeyValue(s *capnp.Segment) (Event_KeyValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event_KeyValue{st}, err
}

func ReadRootEvent_KeyValue(msg *capnp.Message) (Event_KeyValue, error) {
	root, err := msg.RootPtr()
	return Event_KeyValue{root.Struct()}, err
}

func (s Event_KeyValue) String() string {
	str, _ := text.Marshal(0xcc563d0567a7e8ab, s.Struct)
	return str
}

func (s Event_KeyValue) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event_KeyValue) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event_KeyValue) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event_KeyValue) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Event_KeyValue) Value() Event_KeyValue_value { return Event_KeyValue_value(s) }

func (s Event_KeyValue_value) Which() Event_KeyValue_value_Which {
	return Event_KeyValue_value_Which(s.Struct.Uint16(2))
}
func (s Event_KeyValue_value) Bool() bool {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(0)
}

func (s Event_KeyValue_value) SetBool(v bool) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetBit(0, v)
}

func (s Event_KeyValue_value) Int() int32 {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != int")
	}
	return int32(s.Struct.Uint32(4))
}

func (s Event_KeyValue_value) SetInt(v int32) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetUint32(4, uint32(v))
}

func (s Event_KeyValue_value) Uint() uint32 {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != uint")
	}
	return s.Struct.Uint32(4)
}

func (s Event_KeyValue_value) SetUint(v uint32) {
	s.Struct.SetUint16(2, 2)
	s.Struct.SetUint32(4, v)
}

func (s Event_KeyValue_value) Float() float32 {
	if s.Struct.Uint16(2) != 3 {
		panic("Which() != float")
	}
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Event_KeyValue_value) SetFloat(v float32) {
	s.Struct.SetUint16(2, 3)
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s Event_KeyValue_value) String() (string, error) {
	if s.Struct.Uint16(2) != 4 {
		panic("Which() != string")
	}
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Event_KeyValue_value) HasString() bool {
	if s.Struct.Uint16(2) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event_KeyValue_value) StringBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Event_KeyValue_value) SetString(v string) error {
	s.Struct.SetUint16(2, 4)
	return s.Struct.SetText(1, v)
}

// Event_KeyValue_List is a list of Event_KeyValue.
type Event_KeyValue_List struct{ capnp.List }

// NewEvent_KeyValue creates a new list of Event_KeyValue.
func NewEvent_KeyValue_List(s *capnp.Segment, sz int32) (Event_KeyValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Event_KeyValue_List{l}, err
}

func (s Event_KeyValue_List) At(i int) Event_KeyValue { return Event_KeyValue{s.List.Struct(i)} }

func (s Event_KeyValue_List) Set(i int, v Event_KeyValue) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_KeyValue_List) String() string {
	str, _ := text.MarshalList(0xcc563d0567a7e8ab, s.List)
	return str
}

// Event_KeyValue_Promise is a wrapper for a Event_KeyValue promised by a client call.
type Event_KeyValue_Promise struct{ *capnp.Pipeline }

func (p Event_KeyValue_Promise) Struct() (Event_KeyValue, error) {
	s, err := p.Pipeline.Struct()
	return Event_KeyValue{s}, err
}

func (p Event_KeyValue_Promise) Value() Event_KeyValue_value_Promise {
	return Event_KeyValue_value_Promise{p.Pipeline}
}

// Event_KeyValue_value_Promise is a wrapper for a Event_KeyValue_value promised by a client call.
type Event_KeyValue_value_Promise struct{ *capnp.Pipeline }

func (p Event_KeyValue_value_Promise) Struct() (Event_KeyValue_value, error) {
	s, err := p.Pipeline.Struct()
	return Event_KeyValue_value{s}, err
}

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0x9247cd3abc3cd804

// Values of EventType.
const (
	EventType_sensor        EventType = 0
	EventType_settingChange EventType = 1
	EventType_stateChange   EventType = 2
	EventType_request       EventType = 3
	EventType_response      EventType = 4
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sensor:
		return "sensor"
	case EventType_settingChange:
		return "settingChange"
	case EventType_stateChange:
		return "stateChange"
	case EventType_request:
		return "request"
	case EventType_response:
		return "response"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sensor":
		return EventType_sensor
	case "settingChange":
		return EventType_settingChange
	case "stateChange":
		return EventType_stateChange
	case "request":
		return EventType_request
	case "response":
		return EventType_response

	default:
		return 0
	}
}

type EventType_List struct{ capnp.List }

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return EventType_List{l.List}, err
}

func (l EventType_List) At(i int) EventType {
	ul := capnp.UInt16List{List: l.List}
	return EventType(ul.At(i))
}

func (l EventType_List) Set(i int, v EventType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_aeb14304b9528324 = "x\xdad\x93\xcfk\x13[\x1c\xc5\xcf\xb9w\xe6\xa5\xbf" +
	"hzI\xa1\xf0 \x04\x1e}\x8b\x0a-M\xc5M\xb0" +
	"VZ\x8bX7\xbdE\xbbp7\xad\xb7ih:\x93" +
	"f\xa6\xd5\x80R\xc5*\xad(\xa8\xb8\x11\x14\x15\x14E" +
	"Q\xe8\xc2\x85\xd0\xff@\xdd\xb8\xf2O\xe8V\\\x89\xd5" +
	"+3i\x9a\xa0\xb3\x18\x98\xc3\xb9\xf3\xfd\x9e\xcf\x9c\x19" +
	"\xee\xe3q\x91w\x8b\x04t\x8f\xfb\x8f\xfd\xb6\xb2\xb4\xbb" +
	"v\xe2\xd8]\xe8\x7fI\xfbz\xf7E\xd1\x1d\x9d\xfd\x88" +
	"\xb3\"E\x97\xcc?\x10\x04\xf3\x8fr\x04\xad\xf3\xe5\xe8" +
	"N\xe1\xd3\xc9{P\x9d\xc2\xf6_\x9by\xefLl\xbf" +
	"\x05\x98y\xc3W\x99wL\x01\x99m\xae\x83\xb6|\xee" +
	"q\xfe\x06\xf7>@w\xb2\xc5\xe9\xca\xd8\xf2\x9573" +
	"\xdf\xd9\x07\x1cvE\xf2\xda\x83\x99Z\xb1\xe5\xac+b" +
	"\xf7\xa8\xfc\x9c9\x95\x9c\x9b\x94\x17@[*\x06\xd5\xa1" +
	"y\xaf\"\xfdJar\xcd\xf8\xd1\xd0iS\x9b\xf5\xca" +
	"\xabfh-\xbeC\xf7J\xa7\xcb\xda^\x12P\x97\x0f" +
	"\x01\xfa\xa2\xa4\xde\x10\xcc\xf2\x97e/\x05\xa0\xae\xfe\x07" +
	"\xe8K\x92zS0+~\xc6\xb2\x04\xd4\xf5\xd8}E" +
	"R\xdf\x12\xcc\xca\xbdXv\x00\xb55\x02\xe8\x0dI}" +
	"G0\xeb\xfc\x88e\x17P\xb7\x0b\x80\xde\x94\xd4\xf7\x05" +
	"\xd3sAP&!H0U\xf2#:\x10t\xc0\xf4" +
	"j\xfc\xd0\x06\xc160\xb7P\x0e\xbc\x88\x1d\x10\xec\x00" +
	"\xc7\xc2\xa8Z\xf2\x8b\xec\x82`WK26\x92\xa5\xcf" +
	"\xd4*f\x9a\xd4\xf5\xa5\x8f\x14\x00R\x0dV\x01\x0a5" +
	"0\x07P\xaa\xff\xc7\x01:*;\x05\x8c\x85\xc6\x0f\x83" +
	"\xaa\x0dM\x14\x95\xfc\xe2\x04r\x8b\x9e_46\x8c\xbc" +
	"\xc8L,zH\xf9E\xb3^5+\xab&\x8cl\xd5" +
	"\x84\x95\xc0\x0f\x0d\x80\xbf'\x03\xdai-\x83\xe2\x94m" +
	"`\x06\x12\xc4\x80\x93\x00\x9ei\x92Tt\xea\xd4[9" +
	"R\xd4\xb7\xdf\x9a\xda\xa7\xf5LP\xc9}\xe0Oc\xe3" +
	"CI\xfdRP9\xa2\x8e\xfb\xf98\xa0\x9fH\xea\x1d" +
	"A\x1b\x95\x96M\x18y\xcb`\x85\xed\x10l\x07\xd3Q" +
	"\xadb\x98n\xb6\x11d:.]0\xefE\xa5\xc0\x07" +
	"\xc0npZ2A\xdb\x0d\xa6\x17\xaa\xc1r\x83\xf3z" +
	"\xc5\xab\x95\x03\xef|\xc3\xd3\xd3\x8c\x09\xc6\xe2\x01\x0e\xf1" +
	"g\xc5\x98|\x8d\xb6\x83\xf0\x03q\x8d\xfa%\xf5\xb0`" +
	"|5\xff%58\x02\x91Z2\xb5\xc6\xd4\\R\xce" +
	"\xdf\x01\x00\x00\xff\xff\xfa\x9b\xd7\x17"

func init() {
	schemas.Register(schema_aeb14304b9528324,
		0x913e4476e86b71f3,
		0x9247cd3abc3cd804,
		0xcbfc0186319f5a6c,
		0xcc563d0567a7e8ab)
}
